{
	"React Component": {
		"prefix": "rc",
		"scope": "typescriptreact",
		"body": [
			"export interface ${1:${TM_FILENAME_BASE}}Props {",
			"  ",
			"}",
			"",
			"/**",
			" * $2",
			" */",
			"export function ${1:${TM_FILENAME_BASE}}(props: ${1:${TM_FILENAME_BASE}}Props) {",
			"  return (",
			"    $0",
			"  )",
			"}",
		],
		"description": "React Component",
	},
	"Tailwind Element": {
		"scope": "typescriptreact",
		"prefix": "twe",
		"body": [
			"import clsx from \"clsx\";",
			"import { forwardRef, Ref } from \"react\";",
			"",
			"export interface ${1:${TM_FILENAME_BASE}}Props extends ${3:HTMLAttributes}<${4:HTMLElement}> {}",
			"",
			"/**",
			" * $5",
			" */",
			"export const ${1:${TM_FILENAME_BASE}} = forwardRef(function ${1:${TM_FILENAME_BASE}}(",
			"\t{ className, ...props }: ${1:${TM_FILENAME_BASE}}Props,",
			"\tref: Ref<${4:any}>",
			") {",
			"\treturn (",
			"\t\t<${2:div}",
			"\t\t\tref={ref}",
			"\t\t\t{...props}",
			"\t\t\tclassName={clsx('$6', className)}",
			"\t\t/>",
			"\t);",
			"});",
			"",
		],
		"description": "forwardRef component for a single Tailwind CSS using element",
	},
	"Tailwind Component": {
		"scope": "typescriptreact",
		"prefix": "twc",
		"body": [
			"import clsx from \"clsx\";",
			"import { forwardRef, Ref } from \"react\";",
			"",
			"export interface ${1:${TM_FILENAME_BASE}}Props extends ${3:HTMLAttributes}<${4:HTMLElement}> {}",
			"",
			"/**",
			" * $6",
			" */",
			"export const ${1:${TM_FILENAME_BASE}} = forwardRef(function ${1:${TM_FILENAME_BASE}}(",
			"\tprops: ${1:${TM_FILENAME_BASE}}Props,",
			"\tref: Ref<${4:any}>",
			") {",
			"\tconst { className, ...${5}Props } = props",
			"",
			"\treturn (",
			"\t\t<${2:div}",
			"\t\t\tref={ref}",
			"\t\t\t{...${5}Props}",
			"\t\t\tclassName={clsx('$7', className)}>",
			"\t\t</${2:div}>",
			"\t);",
			"});",
			"",
		],
		"description": "forwardRef component for a Tailwind CSS based component",
	},
	"clsx": {
		"scope": "typescriptreact",
		"prefix": "clsx",
		"body": "{clsx(${TM_SELECTED_TEXT}, $1)}",
	},
	"Wrap in useCallback": {
		"scope": "typescript,typescriptreact",
		"body": "useCallback(${TM_SELECTED_TEXT}, [$0])",
	},
	"Wrap in useMemo": {
		"scope": "typescript,typescriptreact",
		"body": "useMemo(() => (${TM_SELECTED_TEXT}), [$0])",
	},
}
